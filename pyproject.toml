[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "lmars"
version = "2.0.0"
description = "L-MARS: A Legal Multi-Agent Workflow for Orchestrated Reasoning and Agentic Search"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "L-MARS Team", email = "contact@lmars.ai"},
]
keywords = ["legal", "research", "ai", "agents", "workflow", "search", "langgraph", "human-in-the-loop"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Legal Industry",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "openai>=1.0.0",
    "python-dotenv>=1.0.0",
    "requests>=2.28.0",
    "beautifulsoup4>=4.12.0",
    "pdfplumber>=0.9.0",
    "nltk>=3.8.0",
    "tqdm>=4.65.0",
    "langgraph>=0.0.40",
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
streamlit = [
    "streamlit>=1.28.0",
    "streamlit-option-menu>=0.3.6",
    "plotly>=5.15.0",
    "pandas>=2.0.0",
    "streamlit-autorefresh>=0.0.1",
    "streamlit-ace>=0.1.1",
]
prod = [
    "redis>=4.5.0",
    "psycopg2-binary>=2.9.0",
]

[project.urls]
Homepage = "https://github.com/your-org/l-mars"
Repository = "https://github.com/your-org/l-mars"
Issues = "https://github.com/your-org/l-mars/issues"
Documentation = "https://l-mars.readthedocs.io"

[project.scripts]
lmars = "lmars.cli:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["lmars*", "streamlit_components*"]
exclude = ["tests*", "test*", "docs*"]

[tool.setuptools.package-data]
lmars = ["*.json", "*.yaml", "*.yml"]
streamlit_components = ["*.py"]

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["test"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["lmars"]
omit = [
    "*/tests/*",
    "*/test*",
    "*/conftest.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]